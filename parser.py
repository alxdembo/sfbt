import json
import os

import networkx as nx
import yaml
from dbt.graph import GraphQueue
from jsonschema.validators import validate

ROOT_DIR = os.path.abspath(os.getcwd())
CONFIG_YAML = ROOT_DIR + '/config.yml'
TEMPLATE_YAML = ROOT_DIR + '/template.yml'
TARGET_MANIFEST_JSON = ROOT_DIR + '/target/manifest.json'
COMPILED_PATH = ROOT_DIR + '/target/compiled/'
GRAPH_GPICKLE = ROOT_DIR + "/target/graph.gpickle"
statemachine_folder = ".aws_autogenerated/statemachine"
FUNCTIONS_PATH = '/functions/'


# todo feed parameters into function
# todo add tests
# todo add dbt compile command before run
# todo clean target before run


def parse_step(graph, function_arn):
    with open(TARGET_MANIFEST_JSON) as f:
        manifest = json.loads(f.read())

    result = {
        'Comment': 'Autogenerated',
        'StartAt': 'Parallel0',
        'States': {
            'Parallel' + str(n): {
                'Type': 'Parallel',
                'Next': 'Parallel' + str(n + 1),
                'Branches': [
                    {
                        'StartAt': i,
                        'States': {i: {
                            'Type': 'Task',
                            'Resource': '${Function}',
                            # 'Parameters': manifest['nodes'][i],
                            'End': True
                        }}
                    } for i in m
                ]
            } for n, m in enumerate(graph)
        },
    }

    last_item = list(result['States'])[-1]

    del result['States'][last_item]['Next']
    result['States'][last_item]['End'] = True

    return result


def add_materializer(template):
    template['Resources']['Materialize'] = {
        'Type': 'AWS::Serverless::Function',
        'Properties': {
            'CodeUri': '/functions/',
            'Runtime': 'python3.9',
            'Timeout': 300,
            'Handler': 'materialize.lambda_handler'}
    }
    return template


def write_sam_template(run_config):
    sam_template = {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Transform": "AWS::Serverless-2016-10-31",
        "Description": "Autogenerated",
        "Resources": {
            f'{p_name}{k}orchestrator': {
                "Type": "AWS::Serverless::StateMachine",
                "Properties": {
                    "Name": f'{p_name}{k}orchestrator',
                    'DefinitionUri': vals['definition_uri'],
                    'DefinitionSubstitutions': {'Function': '!GetAtt Materialize.Arn'},
                    'Policies': [{
                        'LambdaInvokePolicy': {
                            'FunctionName': '!Ref Materialize'
                        }
                    }]
                }
            } for k, pipeline in run_config.items() for p_name, vals in pipeline.items() if 'definition_uri' in vals}
    }

    sam_template = add_materializer(sam_template)

    with open(TEMPLATE_YAML, 'w') as f:
        f.write(yaml.dump(sam_template))


def yaml_load_validate(filename):
    with open(filename) as f:
        loaded = yaml.load(f, Loader=yaml.FullLoader)

    with open('./schemas/' + os.path.basename(filename)) as schema:
        validator = yaml.load(schema, Loader=yaml.FullLoader)

    validate(loaded, validator)

    return loaded


def parse():
    run_config = yaml_load_validate(CONFIG_YAML)
    os.makedirs(statemachine_folder, exist_ok=True)
    compiled_models = []

    for (dirpath, dirnames, filenames) in os.walk(COMPILED_PATH):
        compiled_models.extend(filenames)

    for resource_type, pipeline in run_config.items():
        for pipeline_name, v in pipeline.items():
            graph = nx.read_gpickle(GRAPH_GPICKLE)
            node_list = list(graph.nodes)

            for node_name in node_list:
                node = graph.nodes[node_name]
                if node['resource_type'] != resource_type or os.path.basename(node['path']) not in compiled_models:
                    graph.remove_node(node_name)

            if not list(graph):
                continue

            graph_sorted = list(GraphQueue._grouped_topological_sort(graph))

            run_config[resource_type][pipeline_name][
                'definition_uri'] = f'./{statemachine_folder}/{pipeline_name}_{resource_type}.asl.yml'
            models = parse_step(graph_sorted, v['function_arn'])

            with open(run_config[resource_type][pipeline_name]['definition_uri'], 'w') as f:
                f.write(yaml.dump(models))

    write_sam_template(run_config)


if __name__ == '__main__':
    parse()
